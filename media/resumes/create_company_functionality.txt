** CREATE COMPANY FUNCTIONALITY ->

1) models.py code ->

class Company(models.Model):
    company_in_charge = models.ForeignKey(CompanyInCharge, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    email = models.EmailField(default='example@example.com')
    phone = models.CharField(max_length=20, default='000-000-0000')
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    country = models.CharField(max_length=100, default='India')
    zipcode = models.CharField(max_length=6, default='522426')
    website = models.URLField()
    website_urls = models.CharField(max_length=100, default='Unknown')
    about_company = models.CharField(max_length=255,default='about_company')
    sector_type = models.CharField(max_length=100)
    category = models.CharField(max_length=100, default='Unknown')
    established_date = models.DateField(null=True, blank=True)
    employee_size = models.IntegerField(default=0)
    Attachment = models.FileField(upload_to='attachments/',default='Unknown')
    is_deleted  = models.BooleanField(default=False)


    def _str_(self):
        return self.name

2) forms.py code ->

class CompanyForm(forms.ModelForm):
    class Meta:
        model = Company
        fields = ['name', 'email','phone','address', 'city', 'state','country', 'zipcode', 'website', 'website_urls' ,'about_company','sector_type','category','established_date','employee_size','Attachment','is_deleted']


3) views.py code->

@method_decorator(csrf_exempt, name='dispatch')
class CompanyListCreateView(View):
    def get(self, company_in_charge_id):
        try:
            companies = list(Company.objects.filter(company_in_charge_id=company_in_charge_id).values(
                'id', 'name', 'email', 'phone', 'address', 'city', 
                'state', 'country', 'zipcode', 'website', 'website_urls', 
                'about_company', 'sector_type', 'category', 'established_date', 
                'employee_size', 'Attachment', 'is_deleted', 'company_in_charge__company_name'
            ))

            return JsonResponse(companies, safe=False, status=200)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

    def post(self, request, company_in_charge_id):
        try:
            if company_in_charge_id:
                try:
                    company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
                except CompanyInCharge.DoesNotExist:
                    return JsonResponse({'status': 'error', 'message': 'Invalid company_in_charge ID'}, status=400)
            else:
                return JsonResponse({'status': 'error', 'message': 'company_in_charge_id is required'}, status=400)

            company_email = request.POST.get('email')
            if not company_email:
                return JsonResponse({'status': 'error', 'message': 'Email is required'}, status=400)

            company = Company.objects.filter(email=company_email).first()

            if company:
                company_form = CompanyForm(request.POST, request.FILES, instance=company)
            else:
                company_form = CompanyForm(request.POST, request.FILES)

            if company_form.is_valid():
                company = company_form.save(commit=False)

                company.company_in_charge = company_in_charge
                company.save()

                delete_attachment = request.POST.get('is_deleted', 'false').lower() == 'true'
                if delete_attachment and company.Attachment:
                    if os.path.exists(company.Attachment.path):
                        os.remove(company.Attachment.path)
                    company.Attachment = None
                    company.save()

                    return JsonResponse({'status': 'success', 'message': 'Attachment deleted successfully', 'company_id': company.id}, status=200)

                return JsonResponse({'status': 'success', 'message': 'Company created/updated successfully', 'company_id': company.id}, status=201)
            else:
                return JsonResponse(company_form.errors, status=400)

        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

4) urls.py code ->

    path('companies/<int:company_in_charge_id>/', CompanyListCreateView.as_view(), name='company_list_create'),


5) Postman request ->

    Steps to run the enpoints -

     1) first register the CompanyInCharge from loginfolder postman collection  [Company Registration End Points] (here you will get the compnay_incharge_id)

     2) After that you can pass this compnay_in_charge_id below end points
    
        URL ->  http://127.0.0.1:8000/companies/1/  (GET and POST Request)
        
        Body -> you can kept same body as same as earlier collection
