**  Company Dashboards Functionalities according to dashboards **

   
1) Dashboard ->

@csrf_exempt
def company_status_counts(request, company_in_charge_id):
    company_name = request.GET.get('company_name')

    if not company_name:
        return JsonResponse({'error': 'Company name is required'}, status=400)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
        print(company_in_charge)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': 'Company not found'}, status=404)

    try:
        company = Company.objects.get(name=company_name ,company_in_charge=company_in_charge)
        print(company)
    except Company.DoesNotExist:
        return JsonResponse({'error': 'Company not found'}, status=404)

    total_applications = Application.objects.filter(job__company=company, company_in_charge=company_in_charge).count()
    shortlisted_count = Application.objects.filter(job__company=company, status='shortlisted',company_in_charge=company_in_charge).count()
    rejected_count = Application.objects.filter(job__company=company, status='rejected',company_in_charge=company_in_charge).count()
    jobs_posted = Job.objects.filter(company=company,company_in_charge=company_in_charge).count()

    data = {
        'total_applications': total_applications,
        'shortlisted_count': shortlisted_count,
        'rejected_count': rejected_count,
        'jobs_posted': jobs_posted
    }

    return JsonResponse(data)

2) Profile ->

@method_decorator(csrf_exempt, name='dispatch')
class CompanyListCreateView(View):    
    def post(self, request, company_in_charge_id):
        try:
            if company_in_charge_id:
                try:
                    company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
                except CompanyInCharge.DoesNotExist:
                    return JsonResponse({'status': 'error', 'message': 'Invalid company_in_charge ID'}, status=400)
            else:
                return JsonResponse({'status': 'error', 'message': 'company_in_charge_id is required'}, status=400)

            company_email = request.POST.get('email')
            if not company_email:
                return JsonResponse({'status': 'error', 'message': 'Email is required'}, status=400)
            
            if company_email != company_in_charge.official_email:
                return JsonResponse({'status': 'error', 'message': 'Email does not match the email of the company in charge'}, status=400)

            company = Company.objects.filter(email=company_email,company_in_charge=company_in_charge).first()

            if company:
                company_form = CompanyForm(request.POST, request.FILES, instance=company)
            else:
                company_form = CompanyForm(request.POST, request.FILES)

            if company_form.is_valid():
                company = company_form.save(commit=False)
                company.company_in_charge = company_in_charge
                company.save()

                delete_attachment = request.POST.get('is_deleted', 'false').lower() == 'true'
                if delete_attachment and company.Attachment:
                    if os.path.exists(company.Attachment.path):
                        os.remove(company.Attachment.path)
                    company.Attachment = None
                    company.save()

                    return JsonResponse({'status': 'success', 'message': 'Attachment deleted successfully', 'company_id': company.id}, status=200)

                return JsonResponse({'status': 'success', 'message': 'Company created/updated successfully', 'company_id': company.id}, status=201)
            else:
                return JsonResponse(company_form.errors, status=400)

        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

3) My Job Post ->

a)

@csrf_exempt
def jobs_by_company(request, company_in_charge_id):
    try:
        try:
            company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
        except CompanyInCharge.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)
        
        company_name = request.GET.get('name')
        sort_order = request.GET.get('sort_order')
        job_status = request.GET.get('job_status')

        if not (company_name or sort_order or job_status):
            return JsonResponse({'error': 'Select at least one parameter'}, status=400)

        if company_name:
            company = get_object_or_404(Company, name=company_name, company_in_charge=company_in_charge)
            jobs = Job.objects.filter(company=company)
        else:
            jobs = Job.objects.all()

        if job_status:
         if job_status:
            if job_status.lower() == 'active':
                jobs = jobs.filter(job_status='active')
            elif job_status.lower() == 'closed':
                jobs = jobs.filter(job_status='closed')
            else:
                return JsonResponse({'error': 'Invalid job status'}, status=400)

        if sort_order:
            if sort_order == 'latest':
                jobs = jobs.order_by('-published_at')
            elif sort_order == 'oldest':
                jobs = jobs.order_by('published_at')
            else:
                return JsonResponse({'error': 'Invalid sort order'}, status=400)

        jobs_list = [{
            'id': job.id,
            'company_in_charge':str(company_in_charge),
            'job_title': job.job_title,
            'location': job.location,
            'description': job.description,
            'requirements': job.requirements,
            'job_type': job.job_type,
            'experience': job.experience,
            'category': job.category,
            'published_at': job.published_at,
            'status': job.job_status
        } for job in jobs]

        return JsonResponse(jobs_list, safe=False, status=200)

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

b) 

@csrf_exempt
def apply_job(request, job_id, company_in_charge_id):
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid company_in_charge ID'}, status=400)

    try:
        json_data = json.loads(request.POST.get('data', '{}'))
        job = get_object_or_404(Job, id=job_id, company_in_charge=company_in_charge)

        email = json_data.get('email')
        if not email:
            return JsonResponse({'error': 'Email is required'}, status=400)

        if Application.objects.filter(email=email, job=job).exists():
            return JsonResponse({'error': 'An application with this email already exists for this job.'}, status=400)

        new_user_exists = new_user.objects.filter(email=email).exists()
        job_seeker_exists = JobSeeker.objects.filter(email=email).exists()

        if not new_user_exists and not job_seeker_exists:
            return JsonResponse({'error': 'No account found for this email in NewUser or JobSeeker'}, status=404)

        form = ApplicationForm(json_data, request.FILES)
        if form.is_valid():
            application = form.save(commit=False)
            application.job = job
            application.company_in_charge=company_in_charge

            job_skills = set(job.skills.split(', '))
            candidate_skills = set(json_data.get('skills', '').split(', '))
            application.skills = ', '.join(candidate_skills)

            if not job_skills.intersection(candidate_skills):
                return JsonResponse({'message': 'Candidate is not eligible to apply'}, status=404)

            application.save()
            return JsonResponse({'message': 'Application submitted successfully', 'application_id': application.id}, status=201)

        return JsonResponse({'errors': form.errors}, status=400)

    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON data'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

c) 

@csrf_exempt
def fetch_applicants(request, company_in_charge_id):
    try:
        company_name = request.GET.get('company_name')
        job_title = request.GET.get('job_title')
        
        if not company_name or not job_title:
            return JsonResponse({'error': 'Both company_name and job_title parameters are required.'}, status=400)
        
        try:
           company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
        except CompanyInCharge.DoesNotExist:
           return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)

        company = get_object_or_404(Company, name=company_name,company_in_charge=company_in_charge)
        job = get_object_or_404(Job, job_title=job_title, company=company)

        applicants = Application.objects.filter(job=job).values(
            'first_name', 'last_name', 'bio', 'education', 'experience', 'status'
        )

        applicants_list = list(applicants)
        applicants_count = len(applicants_list)

        return JsonResponse({
            'applicants_count': applicants_count,
            'applicants': applicants_list
        })

    except Company.DoesNotExist:
        return JsonResponse({'error': 'Company not found.'}, status=404)
    except Job.DoesNotExist:
        return JsonResponse({'error': 'Job not found for this company.'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
d)

def company_status(request, status_choice, company_in_charge_id):
    try:
        co_name = request.GET['name']
        print(co_name)
        
        try:
            company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
        except CompanyInCharge.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Invalid company_in_charge ID'}, status=400)

        try:
            company = Company.objects.get(name=co_name, company_in_charge=company_in_charge)
            print(company)
        except Company.DoesNotExist:
            return JsonResponse({'error': f'Company "{co_name}" does not exist.'}, status=404)

        job_id = Job.objects.filter(company=company)

        apply_id = Application.objects.filter(job__in=job_id)

        name = []
        if status_choice == 'selected':
            candidate_status_modelname = CandidateStatus_selected
        elif status_choice == 'rejected':
            candidate_status_modelname = CandidateStatus_rejected
        elif status_choice == 'not_eligible':
            candidate_status_modelname = CandidateStatus_not_eligible
        elif status_choice == 'under_review':
            candidate_status_modelname = CandidateStatus_under_review
        for application in apply_id:
            if application.status == status_choice:
                name.append(application.first_name)
                candidate_status_modelname.objects.create(
                    first_name=application.first_name,
                    status=status_choice,
                    company_name=co_name,
                    job_id=application.job_id, 
                )

        return JsonResponse({'message': name}, status=200)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

e) 

@csrf_exempt
def schedule_interview_from_company(request, company_in_charge_id):
    if request.method != "POST":
        return JsonResponse({'error': 'Invalid request method. Please use POST.'}, status=405)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)

    try:
        data = json.loads(request.body)

        action = data.get('action')
        applicant_id = data.get('applicant_id')
        interview_round = data.get('round')
        interview_date = data.get('interview_date')

        if not action or not applicant_id or not interview_round or not interview_date:
            return JsonResponse({'error': 'action, applicant_id, round, and interview_date parameters are required.'}, status=400)

        applicant = get_object_or_404(Application, id=applicant_id, company_in_charge=company_in_charge)
        
        if Interview.objects.filter(applicant=applicant).exists():
            return JsonResponse({
                'message': f'Interview is already scheduled for applicant ID {applicant_id}.'
            }, status=400)

        applicant_email = applicant.email  
        
        new_user_obj = new_user.objects.filter(email=applicant_email).first()
        job_seeker_obj = JobSeeker.objects.filter(email=applicant_email).first()

        if action == 'collegecue platform':
            job = applicant.job
            company_name = job.company.name if job.company else "N/A"

            Interview.objects.create(
                candidate_name=applicant.first_name,
                applicant=applicant,
                round=interview_round,
                interview_date=interview_date,
                job=job,
                company_in_charge=company_in_charge,
                user=new_user_obj if new_user_obj else None,
                job_seeker=job_seeker_obj if job_seeker_obj else None
                
            )

            interview_details = {
                'company_name': company_name,
                'applicant_name': f"{applicant.first_name} {applicant.last_name}",
                'job_profile': job.job_title,
                'applicant_id': applicant.id,
                'interview_date': interview_date,
            }

            return JsonResponse({
                'message': 'Interview scheduled successfully.',
                'interview_details': interview_details
            })

        return JsonResponse({
            'message': 'Applicant\'s interview will be taken outside the CollegeCue platform.'
        })

    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON data.'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


4) Message ->

@csrf_exempt
def myInbox(request):
    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    email = request.GET.get('email')
    filter_value = request.GET.get('filter')

    if not email:
        return JsonResponse({'status': 'false', 'message': 'Email is required'}, status=400)

    try:
        messages_query = Message.objects.filter(
            Q(sender_new_user__email=email) | Q(sender_job_seeker__email=email) | Q(company_recipient__email=email)
        ).order_by('-timestamp')

        if filter_value in ['read', 'unread']:
            is_read = filter_value == 'read'
            messages_query = messages_query.filter(is_read=is_read)

        message_list = [
            {
                'id': message.id,
                'sender': (
                    message.sender_new_user.email if message.sender_new_user else
                    message.sender_job_seeker.email
                ),
                'recipient': message.company_recipient.email,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_read': message.is_read,
                'attachments': [
                    {
                        'id': attachment.id,
                        'file_url': attachment.file.url,
                        'uploaded_at': attachment.uploaded_at
                    } for attachment in message.attachments.all()
                ]
            }
            for message in messages_query
        ]

        return JsonResponse({'status': 'success', 'messages': message_list}, status=200)

    except Exception as e:
        return JsonResponse({'status': 'false', 'error': str(e)}, status=500)

@csrf_exempt
def getMessages(request):
    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    try:
        sender_email = request.GET.get('sender_email')
        recipient_email = request.GET.get('recipient_email')

        if not all([sender_email, recipient_email]):
            return JsonResponse({'status': 'false', 'message': 'Required fields missing'}, status=400)

        sender_new_user = new_user.objects.filter(email=sender_email).first()
        sender_job_seeker = JobSeeker.objects.filter(email=sender_email).first()
        
        if not sender_new_user and not sender_job_seeker:
            return JsonResponse({'status': 'false', 'message': 'Sender not found'}, status=404)

        company_recipient = Company.objects.filter(email=recipient_email).first()
        
        if not company_recipient:
            return JsonResponse({'status': 'false', 'message': 'Receipent not found'}, status=404)

        all_messages = Message.objects.filter(
            sender_new_user=sender_new_user,
            sender_job_seeker=sender_job_seeker,
            company_recipient=company_recipient
        ).prefetch_related('attachments')

        if not all_messages.exists():
            return JsonResponse({'status': 'false', 'message': 'No messages found'}, status=404)

        all_messages.filter(is_read=False).update(is_read=True)

        messages_data = []
        for message in all_messages:
            attachments = message.attachments.all()
            attachments_data = [
                {
                    'file_url': attachment.file.url,
                    'uploaded_at': attachment.uploaded_at
                }
                for attachment in attachments
            ]

            messages_data.append({
                'message_id': message.id,
                'sender_email': (
                    message.sender_new_user.email if message.sender_new_user else
                    message.sender_job_seeker.email
                ),
                'recipient_email': message.company_recipient.email,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_read': message.is_read,  
                'attachments': attachments_data
            })

        return JsonResponse({'status': 'success', 'messages': messages_data}, status=200)

    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

@csrf_exempt
def sendMessage(request):
    if request.method != "POST":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    sender_email = request.POST.get('sender_email')
    recipient_email = request.POST.get('recipient_email')
    message_content = request.POST.get('content')

    if not all([sender_email, recipient_email, message_content]):
        return JsonResponse({'status': 'false', 'message': 'Required fields missing'}, status=400)

    try:
        sender_new_user = new_user.objects.filter(email=sender_email).first()
        sender_job_seeker = JobSeeker.objects.filter(email=sender_email).first()

        if not sender_new_user and not sender_job_seeker:
            return JsonResponse({'status': 'false', 'message': 'Sender not found'}, status=404)

        recipient = Company.objects.filter(email=recipient_email).first()
        if not recipient:
            return JsonResponse({'status': 'false', 'message': 'Recipient not found'}, status=404)

        message = Message.objects.create(
            sender_new_user=sender_new_user if sender_new_user else None,
            sender_job_seeker=sender_job_seeker if sender_job_seeker else None,
            company_recipient=recipient,
            content=message_content
        )

        attachments = request.FILES.getlist('attachments', [])
        Attachment.objects.bulk_create([
            Attachment(message=message, file=file) for file in attachments
        ])

        email_subject = f'New Message from {sender_email}'
        email_body = (
            f'You have received a new message from {sender_email}.\n\n'
            f'Content: {message_content}\n\n'
            'You can view the message in your inbox.'
        )
        send_mail(
            email_subject,
            email_body,
            settings.EMAIL_HOST_USER,
            [recipient_email],
            fail_silently=False,
        )

        return JsonResponse({'status': 'success', 'message': 'Message sent successfully!'}, status=201)

    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

@csrf_exempt
def searchUser(request):
    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    query = request.GET.get('q', '').strip()

    try:
        student_contacts = new_user.objects.all().values('id', 'firstname','lastname', 'email')
        jobseeker_contacts = JobSeeker.objects.all().values('id', 'first_name','last_name', 'email')
        company_contacts = Company.objects.all().values('id', 'name', 'email')

        if query:
            student_contacts = student_contacts.filter(
                Q(firstname__icontains=query) |
                Q(email__icontains=query)
            )
            jobseeker_contacts = jobseeker_contacts.filter(
                Q(first_name__icontains=query) |
                Q(email__icontains=query)
            )
            company_contacts = company_contacts.filter(
                Q(name__icontains=query) |
                Q(email__icontains=query)
            )

        contact_list = list(student_contacts) + list(jobseeker_contacts) +list(company_contacts)

        return JsonResponse({
            'status': 'success',
            'contacts': contact_list
        }, status=200)

    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)


5) Submit Job Post ->

a)

@csrf_exempt
def create_company_jobs(request, company_in_charge_id):
    try:
        data = json.loads(request.body)
        print(data)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)

    company_name = data.get('company')
    print(company_name)
    if not company_name:
        return JsonResponse({'error': 'Company name is required'}, status=400)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
        print(company_in_charge)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': f'Company in charge with ID "{company_in_charge_id}" does not exist'}, status=404)

    try:
        company = Company.objects.get(name=company_name, company_in_charge=company_in_charge)
        print(company)
    except Company.DoesNotExist:
        return JsonResponse({'error': f'Company with name "{company_name}" does not exist'}, status=404)

    if Job.objects.filter(company=company).count() >= 100:
        return JsonResponse({'message': 'Limit exceeded for job postings by this company'}, status=200)

    job_skills = data.get('skills', '')
    if job_skills:
        unique_job_list = list(set(job_skills.split(', ')))
        data['skills'] = ', '.join(unique_job_list)

    data['company'] = company.id
    data['company_in_charge'] = company_in_charge.id

    form = JobForm(data)
    if form.is_valid():
        job = form.save(commit=False)
        job.company = company  
        job.company_in_charge = company_in_charge  
        job.save() 
        return JsonResponse({'message': 'Job Created successfully'}, status=201)
    else:
        return JsonResponse({'errors': form.errors}, status=400)

b)

@csrf_exempt
def save_screening_questions_and_answers_for_company(request, company_in_charge_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body.decode('utf-8'))

            job_id = data.get('job_id')
            questions_and_answers = data.get('questions_and_answers')

            if not job_id:
                return JsonResponse({'status': 'error', 'message': 'Job ID is missing'}, status=400)

            if not questions_and_answers:
                return JsonResponse({'status': 'error', 'message': 'Questions and answers are missing'}, status=400)
            
            try:
               company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
               print(company_in_charge)
            except CompanyInCharge.DoesNotExist:
               return JsonResponse({'error': f'Company in charge with ID "{company_in_charge_id}" does not exist'}, status=404)

            job = Job.objects.get(id=job_id, company_in_charge=company_in_charge)

            for qa in questions_and_answers:
                question_text = qa.get('question')
                correct_answer = qa.get('correct_answer')

                CompanyScreeningQuestion.objects.create(
                    job=job,
                    question_text=question_text,
                    correct_answer=correct_answer,
                    company_in_charge=company_in_charge
                )

            return JsonResponse({'status': 'success', 'message': 'Questions and answers saved successfully'}, status=201)

        except Job.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Job not found'}, status=404)
        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

c)

@csrf_exempt
def submit_application_with_screening_for_company(request,job_id, company_in_charge_id):
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request method"}, status=405)
    
    try:
        job = Job.objects.get(id=job_id)  
        print(job)
    except Job.DoesNotExist:
        return JsonResponse({"error": "Job not found"}, status=400)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)

    try:
        data = json.loads(request.body)

        email = data.get('email')
        skills = data.get('skills')
        must_have_qualification = data.get('must_have_qualification', False)
        answers = data.get('answers')

        if not email or not answers:
            return JsonResponse({"error": "Email or answers are missing"}, status=400)

        newuser = new_user.objects.filter(email=email).first()
        jobseeker = JobSeeker.objects.filter(email=email).first()
        
        if not newuser and not jobseeker:
            return JsonResponse({"error" : "No registration found for NewUser and JobSeeker with this email"}, status=400)

        first_question_id = answers[0].get('question_id')
        if not first_question_id:
            return JsonResponse({"error": "First question ID is missing"}, status=400)

        first_question = CompanyScreeningQuestion.objects.filter(id=first_question_id).first()
        if not first_question:
            return JsonResponse({"error": f"Invalid question_id: {first_question_id}"}, status=400)


        if Application.objects.filter(job=job, user=newuser, job_seeker=jobseeker,company_in_charge=company_in_charge).exists():
            return JsonResponse({"error": f"User or JobSeeker with email {email} has already submitted an application for this job."}, status=400)

        application = Application.objects.create(
            job=job,
            email=email,
            skills=skills,
            status="pending",
            user=newuser,
            job_seeker=jobseeker,
            company_in_charge=company_in_charge,
            first_name=newuser.first_name if newuser else jobseeker.first_name,
            last_name=newuser.last_name if newuser else jobseeker.last_name
        )

        correct_answers = {question.id: question.correct_answer for question in CompanyScreeningQuestion.objects.filter(job=job)}
        all_answers_correct = True

        for answer_data in answers:
            question_id = answer_data.get('question_id')
            answer_text = answer_data.get('answer')

            if not question_id or not answer_text:
                return JsonResponse({"error": "Question ID or answer is missing"}, status=400)

            question = CompanyScreeningQuestion.objects.filter(id=question_id, job=job).first()
            if not question:
                return JsonResponse({"error": f"Invalid question_id: {question_id}"}, status=400)

            is_correct = (correct_answers.get(question.id) == answer_text)

            CompanyScreeningAnswer.objects.create(
                application=application,
                question=question,
                answer_text=answer_text,
                company_in_charge=company_in_charge
            )

            if not is_correct:
                all_answers_correct = False

        if all_answers_correct and must_have_qualification:
                application.status = 'selected'
                application.save()

                email_subject = "Job Application Status"
                email_body = f"Dear Applicant,\n\nYour application for the job {job.job_title} has been accepted."
                send_mail(
                    email_subject,
                    email_body,
                    settings.EMAIL_HOST_USER,
                    [application.email],
                    fail_silently=False,
                )
                return JsonResponse({"message": "Application submitted successfully and applicant selected."}, status=201)

        elif must_have_qualification and not all_answers_correct:
                application.status = 'rejected'
                application.save()

                email_subject = "Job Application Status"
                email_body = f"Dear Applicant,\n\nUnfortunately, your application for the job {job.job_title} has been rejected."
                send_mail(
                    email_subject,
                    email_body,
                    settings.EMAIL_HOST_USER,
                    [application.email],
                    fail_silently=False,
                )
                return JsonResponse({"message": "Application submitted successfully and applicant rejected."}, status=201)

        elif not must_have_qualification and all_answers_correct:
                application.status = 'pending'
                application.save()

                return JsonResponse({"message": "Applicant moves to the above list."}, status=201)

        elif not must_have_qualification and not all_answers_correct:
                application.status = 'pending'
                application.save()

                return JsonResponse({"message": "Applicant moves to the below list."}, status=201)

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)
    return JsonResponse({"error": "Invalid request method"}, status=405)


6) Interview ->

a) upcoming -

@csrf_exempt
def get_upcoming_interviews_from_company(request,company_in_charge_id):
    if request.method != "GET":
        return JsonResponse({'error': 'Invalid request method. Please use GET.'}, status=405)

    company_name = request.GET.get('company_name')
    if not company_name:
        return JsonResponse({'error': 'company_name parameter is required.'}, status=400)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)

    try:
        upcoming_interviews = Interview.objects.filter(
            job__company__name=company_name,
            company_in_charge=company_in_charge,
            interview_date__gte=timezone.now()
        ).select_related('job__company')

        interviews_list = [
            {
                'candidate_name': interview.candidate_name,
                'job_title': interview.job.job_title,
                'interview_date': interview.interview_date,
                'round': interview.round,
                'status': interview.status,
                'time_left': str(interview.time_left()) if interview.time_left() else 'Expired',
                'can_attend': interview.time_left() and interview.time_left().total_seconds() > 0,
            }
            for interview in upcoming_interviews
        ]

        return JsonResponse({'upcoming_interviews': interviews_list})

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

b) past -

@csrf_exempt
def get_past_interviews_from_company(request,company_in_charge_id):
    if request.method != "GET":
        return JsonResponse({'error': 'Invalid request method. Please use GET.'}, status=405)

    company_name = request.GET.get('company_name')
    if not company_name:
        return JsonResponse({'error': 'company_name parameter is required.'}, status=400)
    
    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Company in charge not found'}, status=404)

    try:
        past_interviews = Interview.objects.filter(
            job__company__name=company_name,
            company_in_charge=company_in_charge,
            interview_date__lt=timezone.now()
        ).select_related('job__company')

        interviews_list = [
            {
                'candidate_name': interview.candidate_name,
                'job_title': interview.job.job_title,
                'interview_date': interview.interview_date,
                'round': interview.round,
                'status': interview.status,
                'time_left': 'Expired',
                'can_attend': False,
            }
            for interview in past_interviews
        ]

        return JsonResponse({'past_interviews': interviews_list})

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


7) Membership

8) Account Setting 

9) Delete Account 

10) Logout


 

