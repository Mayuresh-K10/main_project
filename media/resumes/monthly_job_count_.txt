1)

@csrf_exempt
def company_status_counts(request, company_in_charge_id):
    if request.method != 'GET':
        return JsonResponse({'error': 'Invalid request method, only GET allowed'}, status=405)

    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id, token=token)

        company_name = request.GET.get('company_name')
        if not company_name:
            return JsonResponse({'error': 'Company name is required'}, status=400)

        company = Company.objects.get(name=company_name, company_in_charge=company_in_charge)

        total_applications = Application.objects.filter(job__company=company).count()
        shortlisted_count = Application.objects.filter(job__company=company, status='shortlisted').count()
        rejected_count = Application.objects.filter(job__company=company, status='rejected').count()
        jobs_posted = Job.objects.filter(company=company).count()
		
        jobs_by_month = (
            Job.objects.filter(company=company)
            .annotate(month=TruncMonth('published_at'))
            .values('month')
            .annotate(count=Count('id'))
            .order_by('month')
        )

        response_data = {
            'total_applications': total_applications,
            'shortlisted_count': shortlisted_count,
            'rejected_count': rejected_count,
            'jobs_posted': jobs_posted,
            'jobs_by_month': {job['month'].strftime('%Y-%m'): job['count'] for job in jobs_by_month}
        }

        return JsonResponse(response_data)

    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or company in charge not found'}, status=404)
    except Company.DoesNotExist:
        return JsonResponse({'error': 'Company not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)



2) 

@csrf_exempt
def college_status_counts(request, university_in_charge_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        university_in_charge = UniversityInCharge.objects.get(id=university_in_charge_id, token=token)
    except UniversityInCharge.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or university in charge not found'}, status=404)

    college_id = request.GET.get('college_id')

    if not college_id:
        return JsonResponse({'error': 'college_id is required'}, status=400)

    try:
        college_id = int(college_id)
    except ValueError:
        return JsonResponse({'error': 'Invalid college_id. It must be an integer.'}, status=400)

    if not College.objects.filter(id=college_id, university_in_charge=university_in_charge).exists():
        return JsonResponse({'error': 'College not found'}, status=404)

    try:
        enquiry_count = StudentEnquiry.objects.filter(college_id=college_id, university_in_charge=university_in_charge).count()
        job_posted_count = Job1.objects.filter(college_id=college_id, university_in_charge=university_in_charge).count()
        total_visitor_count = Visitor.objects.filter(college_id=college_id, university_in_charge=university_in_charge).count()
        shortlisted_count = Application1.objects.filter(job__college_id=college_id, university_in_charge=university_in_charge, status='shortlisted').count()

        return JsonResponse({
            'total_visitor_count': total_visitor_count,
            'shortlisted_count': shortlisted_count,
            'job_posted_count': job_posted_count,
            'enquiry_count': enquiry_count
        }, status=200)

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

3)

def jobseeker_application_status_counts(request, jobseeker_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        jobseeker = JobSeeker.objects.get(id=jobseeker_id,token=token)
    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or job seeker not found'}, status=401)

    try:
        email = request.GET.get('email')
        if not email:
            return JsonResponse({'error': 'Email parameter is required'}, status=400)

        jobseeker = JobSeeker.objects.get(id=jobseeker_id, email=email)

        total_jobs_applied_count = (
            Application.objects.filter(job_seeker=jobseeker).count() +
            Application1.objects.filter(job_seeker=jobseeker).count()
        )
        
        pending_count = (
            Application.objects.filter(job_seeker=jobseeker, status='pending').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='pending').count()
        )
        
        interview_scheduled_count = (
            Application.objects.filter(job_seeker=jobseeker, status='interview_scheduled').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='interview_scheduled').count()
        )
        
        rejected_count = (
            Application.objects.filter(job_seeker=jobseeker, status='rejected').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='rejected').count()
        )

        return JsonResponse({
            'total_jobs_applied': total_jobs_applied_count,
            'pending_count': pending_count,
            'interview_scheduled_count': interview_scheduled_count,
            'rejected_count': rejected_count,
        })

    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Job seeker not found with the provided email.'}, status=404)
    except Exception as e:
        return JsonResponse({'error': 'An error occurred', 'details': str(e)}, status=500)


4)

@csrf_exempt
def user_application_status_counts(request, user_id):
    auth_header = request.headers.get('Authorization')

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        user = new_user.objects.get(id=user_id, token=token)

        email = request.GET.get('email')
        if not email or user.email != email:
            return JsonResponse({'error': 'Invalid email parameter or email does not match'}, status=400)

        total_jobs_applied_count = (
            Application.objects.filter(user=user).count() +
            Application1.objects.filter(user=user).count()
        )

        pending_count = (
            Application.objects.filter(user=user, status='pending').count() +
            Application1.objects.filter(user=user, status='pending').count()
        )

        interview_scheduled_count = (
            Application.objects.filter(user=user, status='interview_scheduled').count() +
            Application1.objects.filter(user=user, status='interview_scheduled').count()
        )

        rejected_count = (
            Application.objects.filter(user=user, status='rejected').count() +
            Application1.objects.filter(user=user, status='rejected').count()
        )

        college_enquiries_count = CollegeEnquiry.objects.filter(new_user=user).count()

        return JsonResponse({
            'total_jobs_applied': total_jobs_applied_count,
            'pending_count': pending_count,
            'interview_scheduled': interview_scheduled_count,
            'rejected_count': rejected_count,
            'total_college_enquiries_count': college_enquiries_count
        })

    except new_user.DoesNotExist:
        return JsonResponse({'error': 'User not found or invalid token'}, status=404)
    except Application.DoesNotExist:
        return JsonResponse({'error': 'No applications found for the provided user.'}, status=404)
    except Exception as e:
        return JsonResponse({'error': 'An error occurred', 'details': str(e)}, status=500)

