views.py:
========

import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import CollegeMembership, UniversityInCharge
from .forms import MembershipForm1

@csrf_exempt
def membership_form_view1(request, university_in_charge_id):
    if request.method == 'POST':
        try:
            auth_header = request.headers.get('Authorization')

            if not auth_header or not auth_header.startswith('Bearer '):
                return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

            token = auth_header.split(' ')[1]
            university = UniversityInCharge.objects.get(id=university_in_charge_id, token=token)

            data = json.loads(request.body)
            email = data.get('email')

            if CollegeMembership.objects.filter(email=email).exists():
                return JsonResponse({
                    'status': 'error',
                    'message': 'A membership with this email already exists. You can only submit the form once.'
                }, status=400)
                
            if email != university.email:
                return JsonResponse({
                    'status': 'error',
                    'message': 'The provided email does not match the college in charge email.'
                }, status=400)
            
            form = MembershipForm1(data)
            if form.is_valid():
                membership = form.save(commit=False)
                membership.university_in_charge = university
                membership.save()
                return JsonResponse({
                    'status': 'success',
                    'message': 'Membership created successfully.',
                    'data': {
                        'id': membership.id,
                        'name': membership.name,
                        'email': membership.email,
                        'mobile': membership.mobile,
                        'course_to_purchase': membership.course_to_purchase,
                        'quantity_of_leads': membership.quantity_of_leads,
                        'location_for_leads': membership.location_for_leads,
                        'intake_year': membership.intake_year,
                    }
                }, status=201)
            else:
                return JsonResponse({
                    'status': 'error',
                    'message': 'Invalid data',
                    'errors': form.errors
                }, status=400)

        except UniversityInCharge.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Invalid token or university in charge not found'}, status=404)
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

app urls.py:
===========

path('advertisement/<int:university_in_charge_id>/', views.advertisement_form_view1, name='advertisement_form'),

path('membership/<int:university_in_charge_id>/', views.membership_form_view1, name='membership_form'),