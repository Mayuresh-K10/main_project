** CANDIDATE DASHBOARD FUNCTIONALITIES **

1) Dashboard ->

a)

def jobseeker_application_status_counts(request, jobseeker_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        jobseeker = JobSeeker.objects.get(token=token)
    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or job seeker not found'}, status=401)

    try:
        email = request.GET.get('email')
        if not email:
            return JsonResponse({'error': 'Email parameter is required'}, status=400)

        jobseeker = JobSeeker.objects.get(id=jobseeker_id, email=email)

        total_jobs_applied_count = (
            Application.objects.filter(job_seeker=jobseeker).count() +
            Application1.objects.filter(job_seeker=jobseeker).count()
        )
        
        pending_count = (
            Application.objects.filter(job_seeker=jobseeker, status='pending').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='pending').count()
        )
        
        interview_scheduled_count = (
            Application.objects.filter(job_seeker=jobseeker, status='interview_scheduled').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='interview_scheduled').count()
        )
        
        rejected_count = (
            Application.objects.filter(job_seeker=jobseeker, status='rejected').count() +
            Application1.objects.filter(job_seeker=jobseeker, status='rejected').count()
        )

        return JsonResponse({
            'total_jobs_applied': total_jobs_applied_count,
            'pending_count': pending_count,
            'interview_scheduled_count': interview_scheduled_count,
            'rejected_count': rejected_count,
        })

    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Job seeker not found with the provided email.'}, status=404)
    except Exception as e:
        return JsonResponse({'error': 'An error occurred', 'details': str(e)}, status=500)


b)

from itertools import chain
from django.http import JsonResponse
from .models import JobSeeker, Application, Application1, Job1

def filterjobseeker__applied_jobs(request, jobseeker_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        jobseeker = JobSeeker.objects.get(token=token)
    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or job seeker not found'}, status=401)

    try:
        email = request.GET.get('email')
        if not email:
            return JsonResponse({'error': 'Email parameter is required'}, status=400)
        
        jobseeker = JobSeeker.objects.get(id=jobseeker_id, email=email)
        if not jobseeker:
            return JsonResponse({"error": "JobSeeker not found"}, status=400)

        job_title = request.GET.get('job_title')
        status = request.GET.get('status')
        job_type = request.GET.get('job_type')
        sort_by = request.GET.get('sort_by')

        applications_1 = Application.objects.filter(job_seeker=jobseeker)
        applications_2 = Application1.objects.filter(job_seeker=jobseeker)

        if job_title:
            applications_1 = applications_1.filter(job__job_title=job_title)
            applications_2 = applications_2.filter(job__job_title=job_title)

        if status:
            applications_1 = applications_1.filter(status=status)
            applications_2 = applications_2.filter(status=status)

        if job_type:
            applications_1 = applications_1.filter(job__job_type=job_type)
            applications_2 = applications_2.filter(job__job_type=job_type)

        applications = list(chain(applications_1, applications_2))

        if sort_by == 'job_title_asc':
            applications.sort(key=lambda x: x.job.job_title)
        elif sort_by == 'job_title_desc':
            applications.sort(key=lambda x: x.job.job_title, reverse=True)
        elif sort_by == 'applied_at_asc':
            applications.sort(key=lambda x: x.applied_at)
        elif sort_by == 'applied_at_desc':
            applications.sort(key=lambda x: x.applied_at, reverse=True)

        result = []
        for application in applications:
            job = application.job
            if isinstance(job, Job1):
                result.append({
                    'job_title': job.job_title,
                    'university_in_charge': job.university_in_charge.university_name,
                    'job_location': job.location,
                    'job_type': job.job_type,
                    'status': application.status,
                    'applied_at': application.applied_at,
                })
            else:
                result.append({
                    'job_title': job.job_title,
                    'company': job.company.name,
                    'job_location': job.location,
                    'job_type': job.job_type,
                    'status': application.status,
                    'applied_at': application.applied_at,
                })

        return JsonResponse(result, safe=False)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Job seeker not found with the provided email'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


======================================================================================

2) Profile ->


@csrf_exempt
def create_jobseeker_resume(request, jobseeker_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        jobseeker = JobSeeker.objects.get(token=token)
    except JobSeeker.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or job seeker not found'}, status=401)

    if request.method == 'POST':
        try:
            with transaction.atomic():
                jobseeker = get_object_or_404(JobSeeker, id=jobseeker_id)

                jobseeker_email = request.POST.get('email')
                if not jobseeker:
                    return JsonResponse({'status': 'error', 'message': 'Email is required'}, status=400)
                
                if jobseeker_email != jobseeker.email:
                    return JsonResponse({'status': 'error', 'message': 'Email does not match the email of the jobseeker'}, status=400)

                resume = JobSeeker_Resume.objects.filter(email=jobseeker_email, job_seeker=jobseeker).first()

                if resume:
                    resume_form = JobseekerResumeForm(request.POST, request.FILES, instance=resume)
                else:
                    resume_form = JobseekerResumeForm(request.POST, request.FILES)

                print("Resume Form Validity:", resume_form.is_valid())

                if resume_form.is_valid():
                    resume = resume_form.save(commit=False) 
                    resume.job_seeker = jobseeker
                    print("Resume before save:", resume) 
                     
                    delete_attachment = resume_form.cleaned_data.get('delete', False)
                    new_attachment = resume_form.cleaned_data.get('Attachment')

                    if new_attachment and resume and resume.Attachment:
                        if os.path.exists(resume.Attachment.path):
                            print("Deleting old attachment:", resume.Attachment.path)
                            os.remove(resume.Attachment.path)
                             
                    resume.save()

                    if delete_attachment and resume.Attachment and os.path.exists(resume.Attachment.path):
                        print("Attachment Path for Deletion:", resume.Attachment.path)
                        os.remove(resume.Attachment.path)
                        resume.Attachment = None
                        resume.save()
                        return JsonResponse({'status': 'success', 'message': 'Attachment deleted successfully', 'resume_id': resume.id})

                objective_data = request.POST.get('objective', '{}')
                if objective_data:
                    objective_data = json.loads(objective_data)
                    objective_instance = resume.objective if hasattr(resume, 'objective') else None

                    if objective_instance:
                        objective_form = JobseekerObjectiveForm(objective_data, instance=objective_instance)
                    else:
                        objective_form = JobseekerObjectiveForm(objective_data)

                    if objective_form.is_valid():
                        objective = objective_form.save(commit=False)
                        objective.resume = resume
                        objective.job_seeker = jobseeker
                        objective.save()

                def save_related_data(form_class, data_list, related_name, existing_items):
                    existing_items.delete()
                    
                    for item in data_list:
                        form = form_class(item)
                        if form.is_valid():
                            obj = form.save(commit=False)
                            obj.resume = resume
                            obj.job_seeker = jobseeker
                            obj.save()
                        else:
                            print(f"{related_name} Form Errors:", form.errors)

                save_related_data(JobseekerEducationForm, json.loads(request.POST.get('education', '[]')), 'Education', resume.education_entries.all())
                save_related_data(JobseekerExperienceForm, json.loads(request.POST.get('experience', '[]')), 'Experience', resume.experience_entries.all())
                save_related_data(JobseekerProjectForm, json.loads(request.POST.get('projects', '[]')), 'Projects', resume.projects.all())
                save_related_data(JobseekerReferenceForm, json.loads(request.POST.get('references', '[]')), 'References', resume.references.all())
                save_related_data(JobseekerCertificationForm, json.loads(request.POST.get('certifications', '[]')), 'Certifications', resume.certifications.all())
                save_related_data(JobseekerAchievementForm, json.loads(request.POST.get('achievements', '[]')), 'Achievements', resume.achievements.all())
                save_related_data(JobseekerPublicationForm, json.loads(request.POST.get('publications', '[]')), 'Publications', resume.publications.all())

                return JsonResponse({
                    'status': 'success',
                    'message': 'Resume created/updated successfully',
                    'resume_id': resume.id
                })

            print("Form Errors:", resume_form.errors)
            return JsonResponse({'status': 'error', 'errors': resume_form.errors}, status=400)

        except json.JSONDecodeError as e:
            print("JSONDecodeError:", str(e))
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data'}, status=400)

        except IntegrityError as e:
            print("IntegrityError:", str(e))
            return JsonResponse({'status': 'error', 'message': 'Database integrity error', 'details': str(e)}, status=500)

        except OperationalError as e:
            print("OperationalError:", str(e))
            return JsonResponse({'status': 'error', 'message': 'Database operational error', 'details': str(e)}, status=500)

        except Exception as e:
            print("General Exception:", str(e))
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

    else:
        return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

===============================================================================================
3)  Resume ->

def get_jobseeker_resume_detail_by_id(request, resume_id):
    auth_header = request.headers.get('Authorization')
    
    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        jobseeker = JobSeeker.objects.get(token=token)

        if request.method == 'GET':
            resume = get_object_or_404(JobSeeker_Resume, id=resume_id)

            resume_data = {
                "first_name": resume.first_name,
                "last_name": resume.last_name,
                "email": resume.email,
                "phone": resume.phone,
                "address": resume.address,
                "date_of_birth": resume.date_of_birth,
                "website_urls": resume.website_urls,
                "skills": resume.skills,
                "activities": resume.activities,
                "interests": resume.interests,
                "languages": resume.languages,
                "bio": resume.bio,
                "city": resume.city,
                "state": resume.state,
                "country": resume.country,
                "zipcode": resume.zipcode,
                # "attachments": resume.Attachment,
                "objective": resume.objective.text if hasattr(resume, 'objective') else 'Not specified',
                "education": [
                    {
                        "course_or_degree": education.course_or_degree,
                        "school_or_university": education.school_or_university,
                        "grade_or_cgpa": education.grade_or_cgpa,
                        "start_date": education.start_date,
                        "end_date": education.end_date,
                        "description": education.description
                    } for education in resume.education_entries.all()
                ],
                "experience": [
                    {
                        "job_title": experience.job_title,
                        "company_name": experience.company_name,
                        "start_date": experience.start_date,
                        "end_date": experience.end_date,
                        "description": experience.description,
                    } for experience in resume.experience_entries.all()
                ],
                "projects": [
                    {
                        "title": project.title,
                        "description": project.description,
                        "project_link": project.project_link
                    } for project in resume.projects.all()
                ],
                "references": [
                    {
                        "name": reference.name,
                        "contact_info": reference.contact_info,
                        "relationship": reference.relationship,
                    } for reference in resume.references.all()
                ],
                "certifications": [
                    {
                        "name": certification.name,
                        "start_date": certification.start_date,
                        "end_date": certification.end_date,
                    } for certification in resume.certifications.all()
                ],
                "achievements": [
                    {
                        "title": achievement.title,
                        "publisher": achievement.publisher,
                        "start_date": achievement.start_date,
                        "end_date": achievement.end_date,
                    } for achievement in resume.achievements.all()
                ],
                "publications": [
                    {
                        "title": publication.title,
                        "start_date": publication.start_date,
                        "end_date": publication.end_date,
                    } for publication in resume.publications.all()
                ]
            }

            return JsonResponse(resume_data, status=200)
        else:
            return JsonResponse({"error": "Method not allowed"}, status=405)
    except JobSeeker.DoesNotExist:
        return JsonResponse({"error": "Invalid token or job seeker not found"}, status=401)
    except ObjectDoesNotExist:
        return JsonResponse({"error": "Resume not found"}, status=404)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)
===========================================================================================================
4) Message ->

a)

@csrf_exempt
def search_company_college_jobseeker(request):
    auth_header = request.headers.get('Authorization')

    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    query = request.GET.get('q', '').strip()

    if not query:
        return JsonResponse({'status': 'success', 'contacts': []}, status=200)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]
		
        jobseeker = JobSeeker.objects.get(token=token)

        user_contacts = JobSeeker.objects.filter(
            Q(first_name__icontains=query) | Q(email__icontains=query)
        ).values('id', 'first_name', 'email')

        company_contacts = Company.objects.filter(
            Q(name__icontains=query) | Q(email__icontains=query)
        ).values('id', 'name', 'email')

        college_contacts = College.objects.filter(
            Q(college_name__icontains=query) | Q(email__icontains=query)
        ).values('id', 'college_name', 'email')

        contact_list = list(user_contacts) + list(company_contacts) + list(college_contacts)

        return JsonResponse({
            'status': 'success',
            'contacts': contact_list
        }, status=200)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or job seeker not found'}, status=401)

    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)


b)


@csrf_exempt
def send_msg_clg_comp_jobseeker(request):
    auth_header = request.headers.get('Authorization')

    if request.method != "POST":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    sender_email = request.POST.get('sender_email')
    recipient_email = request.POST.get('recipient_email')
    message_content = request.POST.get('content')

    if not all([sender_email, recipient_email, message_content]):
        return JsonResponse({'status': 'false', 'message': 'Required fields missing'}, status=400)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        sender = JobSeeker.objects.get(token=token)

        if sender.email != sender_email:
            return JsonResponse({'status': 'false', 'message': 'Sender email does not match the token'}, status=403)

        recipient_company = Company.objects.filter(email=recipient_email).first()
        recipient_college = College.objects.filter(email=recipient_email).first()

        if recipient_company:
            message = Message.objects.create(
                sender_job_seeker=sender,
                company_recipient=recipient_company,
                content=message_content
            )
            recipient_name = recipient_company.name

            attachments = request.FILES.getlist('attachments', [])
            if attachments:
                Attachment.objects.bulk_create([
                    Attachment(message=message, file=file) for file in attachments
                ])

        elif recipient_college:
            message = College_Message.objects.create(
                sender_jobseeker=sender,
                college_recipient=recipient_college,
                content=message_content
            )
            recipient_name = recipient_college.college_name

            attachments = request.FILES.getlist('attachments', [])
            if attachments:
                College_Attachment.objects.bulk_create([
                    College_Attachment(message=message, file=file) for file in attachments
                ])

        else:
            return JsonResponse({'status': 'false', 'message': 'Recipient not found'}, status=404)

        email_subject = f'New Message from {sender.email}'
        email_body = (
            f'You have received a new message from {sender.email}.\n\n'
            f'Content: {message_content}\n\n'
            'You can view the message in your inbox.'
        )
        send_mail(
            email_subject,
            email_body,
            settings.EMAIL_HOST_USER,
            [recipient_email],
            fail_silently=False,
        )

        return JsonResponse({'status': 'success', 'message': 'Message sent successfully!'}, status=201)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or job seeker not found'}, status=401)

    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)


c)


@csrf_exempt
def get_clg_comp_jobseeker_messages(request):
    auth_header = request.headers.get('Authorization')

    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        sender = JobSeeker.objects.get(token=token)

        sender_email = request.GET.get('sender_email')
        recipient_email = request.GET.get('recipient_email')

        if not all([sender_email, recipient_email]):
            return JsonResponse({'status': 'false', 'message': 'Required fields missing'}, status=400)

        if sender.email != sender_email:
            return JsonResponse({'status': 'false', 'message': 'Sender email does not match the token'}, status=403)

        company_recipient = Company.objects.filter(email=recipient_email).first()
        college_recipient = College.objects.filter(email=recipient_email).first()

        if company_recipient:
            all_messages = Message.objects.filter(
                sender_job_seeker=sender,
                company_recipient=company_recipient
            ).prefetch_related('attachments')

        elif college_recipient:
            all_messages = College_Message.objects.filter(
                sender_jobseeker=sender,
                college_recipient=college_recipient
            ).prefetch_related('attachment')

        else:
            return JsonResponse({'status': 'false', 'message': 'Recipient not found'}, status=404)

        if not all_messages.exists():
            return JsonResponse({'status': 'false', 'message': 'No messages found'}, status=404)

        all_messages.filter(is_read=False).update(is_read=True)

        messages_data = [
            {
                'message_id': message.id,
                'sender_email': message.sender_job_seeker.email if company_recipient else message.sender_jobseeker.email,
                'recipient_email': recipient_email,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_read': message.is_read,
                'attachments': [
                    {
                        'file_url': attachment.file.url,
                        'uploaded_at': attachment.uploaded_at
                    }
                    for attachment in (message.attachments.all() if company_recipient else message.attachment.all())
                ]
            }
            for message in all_messages
        ]

        return JsonResponse({'status': 'success', 'messages': messages_data}, status=200)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or job seeker not found'}, status=401)

    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

d)

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.db.models import Q
from .models import JobSeeker, Message, College_Message

@csrf_exempt
def clg_comp_jobseeker_inbox(request):
    auth_header = request.headers.get('Authorization')

    if request.method != "GET":
        return JsonResponse({'status': 'false', 'message': 'Invalid request method'}, status=405)

    email = request.GET.get('email')
    filter_value = request.GET.get('filter')

    if not email:
        return JsonResponse({'status': 'false', 'message': 'Email is required'}, status=400)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        sender = JobSeeker.objects.get(token=token)
		
        if sender.email != email:
            return JsonResponse({'status': 'false', 'message': 'Email does not match the authenticated user'}, status=403)

        company_messages_query = Message.objects.filter(
            Q(sender_job_seeker__email=email) | Q(company_recipient__email=email)
        )

        college_messages_query = College_Message.objects.filter(
            Q(sender_jobseeker__email=email) | Q(college_recipient__email=email)
        )
		
        if filter_value in ['read', 'unread']:
            is_read = filter_value == 'read'
            company_messages_query = company_messages_query.filter(is_read=is_read)
            college_messages_query = college_messages_query.filter(is_read=is_read)

        messages_list = []

        for message in company_messages_query.order_by('-timestamp'):
            messages_list.append({
                'id': message.id,
                'sender': message.sender_job_seeker.email,
                'recipient': message.company_recipient.email,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_read': message.is_read,
                'attachments': [
                    {
                        'id': attachment.id,
                        'file_url': attachment.file.url,
                        'uploaded_at': attachment.uploaded_at
                    } for attachment in message.attachments.all()
                ]
            })

        for message in college_messages_query.order_by('-timestamp'):
            messages_list.append({
                'id': message.id,
                'sender': message.sender_jobseeker.email,
                'recipient': message.college_recipient.email,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_read': message.is_read,
                'attachments': [
                    {
                        'id': attachment.id,
                        'file_url': attachment.file.url,
                        'uploaded_at': attachment.uploaded_at
                    } for attachment in message.attachment.all()
                ]
            })

        messages_list.sort(key=lambda x: x['timestamp'], reverse=True)

        return JsonResponse({'status': 'success', 'messages': messages_list}, status=200)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Invalid token or job seeker not found'}, status=401)

    except Exception as e:
        return JsonResponse({'status': 'false', 'error': str(e)}, status=500)

==============================================================================================

5) Jobs ->

@csrf_exempt
def fetch_jobs_by_job_seeker_skills(request, job_seeker_id):
    auth_header = request.headers.get('Authorization')

    try:
        if request.method == 'GET':
            if not auth_header or not auth_header.startswith('Bearer '):
                return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format'}, status=400)

            token = auth_header.split(' ')[1]

            try:
                job_seeker = JobSeeker.objects.get(token=token, id=job_seeker_id)
            except JobSeeker.DoesNotExist:
                return JsonResponse({'error': 'Job Seeker not found.'}, status=404)

            try:
                resume = JobSeeker_Resume.objects.get(job_seeker=job_seeker)
            except JobSeeker_Resume.DoesNotExist:
                return JsonResponse({'error': 'Job Seeker Resume not found.'}, status=404)

            skills = resume.skills
            skills_list = [skill.strip().lower() for skill in skills.split(',')] if skills else []

            if not skills_list:
                return JsonResponse({'error': 'No skills found for this Job Seeker.'}, status=400)

            job_queries = Q()
            for skill in skills_list:
                job_queries |= Q(skills__icontains=skill)

            jobs_from_job_model = Job.objects.filter(job_queries).distinct()
            jobs_from_job1_model = Job1.objects.filter(job_queries).distinct()

            combined_jobs = list(jobs_from_job_model) + list(jobs_from_job1_model)

            sort_order = request.GET.get('sort_order', 'latest')
            if sort_order == 'latest':
                combined_jobs = sorted(combined_jobs, key=lambda x: x.published_at, reverse=True)
            elif sort_order == 'oldest':
                combined_jobs = sorted(combined_jobs, key=lambda x: x.published_at)
            else:
                return JsonResponse({'error': 'Invalid sort order. Use "latest" or "oldest".'}, status=400)

            job_list = []
            for job in combined_jobs:
                if isinstance(job, Job):
                    job_list.append({
                        'company_name': job.company.name,
                        'job_title': job.job_title,
                        'location': job.location,
                        'job_type': job.job_type,
                        'job_posted_date': job.published_at
                    })
                elif isinstance(job, Job1):
                    job_list.append({
                        'college': job.college.college_name,
                        'job_title': job.job_title,
                        'location': job.location,
                        'job_type': job.job_type,
                        'job_posted_date': job.published_at
                    })

            return JsonResponse({'jobs': job_list}, safe=False)
        else:
            return JsonResponse({'error': 'Invalid request method.'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

=============================================================================================================

6) Interview ->

a)

@csrf_exempt
def get_upcoming_interviews_by_job_title(request, job_seeker_id):
    auth_header = request.headers.get('Authorization')

    if request.method != "GET":
        return JsonResponse({'error': 'Invalid request method. Please use GET.'}, status=405)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]

        job_seeker = JobSeeker.objects.get(token=token, id=job_seeker_id)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Job Seeker not found.'}, status=404)

    job_title = request.GET.get('job_title')
    if not job_title:
        return JsonResponse({'error': 'job_title parameter is required.'}, status=400)

    try:
        upcoming_interviews = Interview.objects.filter(
            job_seeker=job_seeker,
            interview_date__gte=timezone.now(),
            job__job_title=job_title
        ).select_related('job__company')

        interviews_data = []
        for interview in upcoming_interviews:
            company_name = interview.job.company.name if interview.job.company else "N/A"
            interviews_data.append({
                'job_title': interview.job.job_title,
                'job_id': interview.job.id,
                'company_name': company_name,
                'interview_date': interview.interview_date.date(),
                'interview_time': interview.interview_date.time(),
                'time_left': str(interview.time_left()) if interview.time_left() else 'Expired',
                'can_attend': interview.time_left() and interview.time_left().total_seconds() > 0,
            })

        return JsonResponse({'upcoming_interviews': interviews_data})

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


b)

@csrf_exempt
def get_past_interviews_by_job_title(request, job_seeker_id):
    auth_header = request.headers.get('Authorization')

    if request.method != "GET":
        return JsonResponse({'error': 'Invalid request method. Please use GET.'}, status=405)

    try:
        if not auth_header or not auth_header.startswith('Bearer '):
            return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

        token = auth_header.split(' ')[1]
		
        job_seeker = JobSeeker.objects.get(token=token, id=job_seeker_id)

    except JobSeeker.DoesNotExist:
        return JsonResponse({'error': 'Job Seeker not found.'}, status=404)

    job_title = request.GET.get('job_title')
    if not job_title:
        return JsonResponse({'error': 'job_title parameter is required.'}, status=400)

    try:
        past_interviews = Interview.objects.filter(
            job_seeker=job_seeker,
            interview_date__lt=timezone.now(),
            job__job_title=job_title
        ).select_related('job__company')

        interviews_data = []
        for interview in past_interviews:
            company_name = interview.job.company.name if interview.job.company else "N/A"
            interviews_data.append({
                'job_title': interview.job.job_title,
                'job_id': interview.job.id,
                'company_name': company_name,
                'interview_date': interview.interview_date.date(),
                'interview_time': interview.interview_date.time(),
                'time_left': 'Expired', 
                'can_attend': False,
            })

        return JsonResponse({'past_interviews': interviews_data})

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

===============================================================================================

7) NEWS  (front side)

8) Saved jobs -> (Pending from your side)

9) Account Setting  (completed from my side)

10) Delete Account (completed from my side)

11) Logout  (completed from my side)