a) views.py code ->

1) Posted Jobs =>

@csrf_exempt
def get_job_application_summary(request, company_in_charge_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id, token=token)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or company in charge not found'}, status=401)

    job_data = (
        Job.objects.filter(company_in_charge=company_in_charge)
        .values('job_title', 'location')
        .annotate(applied_candidates=Count('application'))
    )

    job_summary = list(job_data)

    return JsonResponse({'Posted_Jobs': job_summary})

2) Candidates Applied =>

@csrf_exempt
def get_application_details(request, company_in_charge_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id, token=token)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or company in charge not found'}, status=401)

    applications = (
        Application.objects.filter(company_in_charge=company_in_charge)
        .select_related('job') 
        .values('first_name', 'last_name', 'job__job_title', 'status')
    )

    application_details = list(applications)

    return JsonResponse({'Candidates Applied': application_details})

3) Update Company Application Status =>

@csrf_exempt
def update_company_application_status(request, company_in_charge_id, application_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        company_in_charge = CompanyInCharge.objects.get(id=company_in_charge_id, token=token)
    except CompanyInCharge.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or company in charge not found'}, status=401)

    try:
        application = Application.objects.get(company_in_charge=company_in_charge, id=application_id)
    except Application.DoesNotExist:
        return JsonResponse({'error': 'Application not found'}, status=404)

    try:
        data = json.loads(request.body)
        app_status = data.get("application_status")
        if not app_status:
            return JsonResponse({'error': 'Application status is required'}, status=400)

        application.status = app_status
        application.save()
        return JsonResponse({'message': 'Application status updated successfully'}, status=200)

    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)

4) Update College Application Status =>

@csrf_exempt
def update_college_application_status(request, university_in_charge_id, application_id):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return JsonResponse({'error': 'Token is missing or invalid format'}, status=400)

    token = auth_header.split(' ')[1]

    try:
        university_in_charge = UniversityInCharge.objects.get(id=university_in_charge_id, token=token)
    except UniversityInCharge.DoesNotExist:
        return JsonResponse({'error': 'Invalid token or university in charge not found'}, status=401)

    try:
        application = Application1.objects.get(university_in_charge=university_in_charge, id=application_id)
    except Application1.DoesNotExist:
        return JsonResponse({'error': 'Application not found'}, status=404)

    try:
        data = json.loads(request.body)
        app_status = data.get("application_status")
        
        if not app_status:
            return JsonResponse({'error': 'Application status is required'}, status=400)

        application.status = app_status
        application.save()
        return JsonResponse({'message': 'Application status updated successfully'}, status=200)

    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)


b) urls.py code ->

   path('job-application-summary/<int:company_in_charge_id>/', views.get_job_application_summary, name='job_application_summary'),
   path('get-application-details/<int:company_in_charge_id>/', views.get_application_details, name='get_application_details'),
   path('update-company-application-status/<int:company_in_charge_id>/<int:application_id>/', views.update_company_application_status, name='update_company_application_status'),
   path('update-college-application-status/<int:university_in_charge_id>/<int:application_id>/', views.update_college_application_status, name='update_college_application_status'),

c) Postman Request =>

1) URL -> http://127.0.0.1:8000/job-application-summary/2/      (GET Request)

2) URL -> http://127.0.0.1:8000/get-application-details/2/      (GET Request)

3) URL -> http://127.0.0.1:8000/update-company-application-status/1/17/  (POST Request)

   Body -> 

{
    "application_status":"selected"
}
  

4) URL -> http://127.0.0.1:8000/update-college-application-status/2/12/   (POST Request)


Body -> 

{
    "application_status":"rejected"
}
  
    

