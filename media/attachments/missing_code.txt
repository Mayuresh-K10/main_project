# @csrf_exempt
# def send_message(request):
#     if request.method == 'POST':
#         auth_header = request.headers.get('Authorization')
#         if not auth_header or not auth_header.startswith('Bearer '):
#             return JsonResponse({'status': 'error', 'message': 'Token is missing or invalid format.'}, status=400)

#         token = auth_header.split(' ')[1]
#         sender_email = request.POST.get('sender_email')
#         recipient_email = request.POST.get('recipient_email')
#         content = request.POST.get('content')

#         if not sender_email or not recipient_email or not content:
#             return JsonResponse({
#                 "status": "error",
#                 "message": "Sender email, recipient email, and content are required."
#             })

#         sender = None
#         sender = (
#             new_user.objects.filter(email=sender_email, token=token).first() or
#             JobSeeker.objects.filter(email=sender_email, token=token).first() or
#             UniversityInCharge.objects.filter(official_email=sender_email, token=token).first()
#         )

#         if not sender:
#             return JsonResponse({"status": "error", "message": "Sender email or token is invalid."}, status=403)
        
#         recipient = None
#         recipient = (
#             new_user.objects.filter(email=recipient_email).first() or
#             JobSeeker.objects.filter(email=recipient_email).first() or
#             UniversityInCharge.objects.filter(official_email=recipient_email).first()
#         )

#         if not recipient:
#             return JsonResponse({"status": "error", "message": "Recipient email not found."}, status=404)

#         sender_student = sender_candidate = sender_college = None
#         recipient_student = recipient_candidate = recipient_college = None

#         if isinstance(sender, new_user):
#             sender_student = sender  
#         elif isinstance(sender, JobSeeker):
#             sender_candidate = sender 
#         elif isinstance(sender, UniversityInCharge):
#             sender_college = sender  

#         if isinstance(recipient, new_user):
#             recipient_student = recipient  
#         elif isinstance(recipient, JobSeeker):
#             recipient_candidate = recipient  
#         elif isinstance(recipient, UniversityInCharge):
#             recipient_college = recipient  

#         message = Messages1.objects.create(
#             student=sender_student,
#             candidate=sender_candidate,
#             college=sender_college,
#             content=content,
#             recipient_student=recipient_student,
#             recipient_candidate=recipient_candidate,
#             recipient_college=recipient_college
#         )

#         files = request.FILES.getlist('attachments') 
#         for file in files:
#             Attachment1.objects.create(
#                 message=message,
#                 file=file
#             )

#         return JsonResponse({
#             "status": "success",
#             "message": "Message sent successfully."
#         })

#     else:
#         return JsonResponse({
#             "status": "error",
#             "message": "Invalid request method. Please use POST."
#         })